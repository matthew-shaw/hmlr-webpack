/*! For license information please see hmlr.ea4b4f731040c7aaab1d.min.js.LICENSE.txt */
(() => {
  "use strict";
  (() => {
    function t(t) {
      const e = `--govuk-frontend-breakpoint-${t}`;
      return {
        property: e,
        value:
          window
            .getComputedStyle(document.documentElement)
            .getPropertyValue(e) || void 0,
      };
    }
    function e(t = document.body) {
      return !!t && t.classList.contains("govuk-frontend-supported");
    }
    function n(t, e) {
      return `${t.moduleName}: ${e}`;
    }
    class o extends Error {
      constructor(...t) {
        super(...t), (this.name = "GOVUKFrontendError");
      }
    }
    class i extends o {
      constructor(t = document.body) {
        const e =
          "noModule" in HTMLScriptElement.prototype
            ? 'GOV.UK Frontend initialised without `<body class="govuk-frontend-supported">` from template `<script>` snippet'
            : "GOV.UK Frontend is not supported in this browser";
        super(
          t
            ? e
            : 'GOV.UK Frontend initialised without `<script type="module">`',
        ),
          (this.name = "SupportError");
      }
    }
    class s extends o {
      constructor(t) {
        let e = "string" == typeof t ? t : "";
        if ("object" == typeof t) {
          const {
            component: o,
            identifier: i,
            element: s,
            expectedType: r,
          } = t;
          (e = i),
            (e += s
              ? ` is not of type ${null != r ? r : "HTMLElement"}`
              : " not found"),
            (e = n(o, e));
        }
        super(e), (this.name = "ElementError");
      }
    }
    class r extends o {
      constructor(t) {
        super(
          "string" == typeof t
            ? t
            : n(t, "Root element (`$root`) already initialised"),
        ),
          (this.name = "InitError");
      }
    }
    function u(t, n, o) {
      let s,
        r = document;
      var u;
      "object" == typeof o &&
        ((r = null != (u = o.scope) ? u : r), (s = o.onError)),
        "function" == typeof o && (s = o),
        o instanceof HTMLElement && (r = o);
      const c = r.querySelectorAll(`[data-module="${t.moduleName}"]`);
      return e()
        ? Array.from(c)
            .map((e) => {
              try {
                return void 0 !== n ? new t(e, n) : new t(e);
              } catch (o) {
                return (
                  s
                    ? s(o, { element: e, component: t, config: n })
                    : console.log(o),
                  null
                );
              }
            })
            .filter(Boolean)
        : (s ? s(new i(), { component: t, config: n }) : console.log(new i()),
          []);
    }
    class c {
      get $root() {
        return this._$root;
      }
      constructor(t) {
        this._$root = void 0;
        const e = this.constructor;
        if ("string" != typeof e.moduleName)
          throw new r("`moduleName` not defined in component");
        if (!(t instanceof e.elementType))
          throw new s({
            element: t,
            component: e,
            identifier: "Root element (`$root`)",
            expectedType: e.elementType.name,
          });
        (this._$root = t), e.checkSupport(), this.checkInitialised();
        const n = e.moduleName;
        this.$root.setAttribute(`data-${n}-init`, "");
      }
      checkInitialised() {
        const t = this.constructor,
          e = t.moduleName;
        if (
          e &&
          (function (t, e) {
            return t instanceof HTMLElement && t.hasAttribute(`data-${e}-init`);
          })(this.$root, e)
        )
          throw new r(t);
      }
      static checkSupport() {
        if (!e()) throw new i();
      }
    }
    c.elementType = HTMLElement;
    class d extends c {
      constructor(t) {
        super(t),
          (this.$menuButton = void 0),
          (this.$menu = void 0),
          (this.menuIsOpen = !1),
          (this.mql = null);
        const e = this.$root.querySelector(".govuk-js-header-toggle");
        if (!e) return this;
        const n = e.getAttribute("aria-controls");
        if (!n)
          throw new s({
            component: d,
            identifier:
              'Navigation button (`<button class="govuk-js-header-toggle">`) attribute (`aria-controls`)',
          });
        const o = document.getElementById(n);
        if (!o)
          throw new s({
            component: d,
            element: o,
            identifier: `Navigation (\`<ul id="${n}">\`)`,
          });
        (this.$menu = o),
          (this.$menuButton = e),
          this.setupResponsiveChecks(),
          this.$menuButton.addEventListener("click", () =>
            this.handleMenuButtonClick(),
          );
      }
      setupResponsiveChecks() {
        const e = t("desktop");
        if (!e.value)
          throw new s({
            component: d,
            identifier: `CSS custom property (\`${e.property}\`) on pseudo-class \`:root\``,
          });
        (this.mql = window.matchMedia(`(min-width: ${e.value})`)),
          "addEventListener" in this.mql
            ? this.mql.addEventListener("change", () => this.checkMode())
            : this.mql.addListener(() => this.checkMode()),
          this.checkMode();
      }
      checkMode() {
        this.mql &&
          this.$menu &&
          this.$menuButton &&
          (this.mql.matches
            ? (this.$menu.removeAttribute("hidden"),
              this.$menuButton.setAttribute("hidden", ""))
            : (this.$menuButton.removeAttribute("hidden"),
              this.$menuButton.setAttribute(
                "aria-expanded",
                this.menuIsOpen.toString(),
              ),
              this.menuIsOpen
                ? this.$menu.removeAttribute("hidden")
                : this.$menu.setAttribute("hidden", "")));
      }
      handleMenuButtonClick() {
        (this.menuIsOpen = !this.menuIsOpen), this.checkMode();
      }
    }
    d.moduleName = "govuk-header";
    class h extends c {
      constructor(t) {
        super(t),
          (this.$menuButton = void 0),
          (this.$menu = void 0),
          (this.menuIsOpen = !1),
          (this.mql = null);
        const e = this.$root.querySelector(
          ".govuk-js-service-navigation-toggle",
        );
        if (!e) return this;
        const n = e.getAttribute("aria-controls");
        if (!n)
          throw new s({
            component: h,
            identifier:
              'Navigation button (`<button class="govuk-js-service-navigation-toggle">`) attribute (`aria-controls`)',
          });
        const o = document.getElementById(n);
        if (!o)
          throw new s({
            component: h,
            element: o,
            identifier: `Navigation (\`<ul id="${n}">\`)`,
          });
        (this.$menu = o),
          (this.$menuButton = e),
          this.setupResponsiveChecks(),
          this.$menuButton.addEventListener("click", () =>
            this.handleMenuButtonClick(),
          );
      }
      setupResponsiveChecks() {
        const e = t("tablet");
        if (!e.value)
          throw new s({
            component: h,
            identifier: `CSS custom property (\`${e.property}\`) on pseudo-class \`:root\``,
          });
        (this.mql = window.matchMedia(`(min-width: ${e.value})`)),
          "addEventListener" in this.mql
            ? this.mql.addEventListener("change", () => this.checkMode())
            : this.mql.addListener(() => this.checkMode()),
          this.checkMode();
      }
      checkMode() {
        this.mql &&
          this.$menu &&
          this.$menuButton &&
          (this.mql.matches
            ? (this.$menu.removeAttribute("hidden"),
              this.$menuButton.setAttribute("hidden", ""))
            : (this.$menuButton.removeAttribute("hidden"),
              this.$menuButton.setAttribute(
                "aria-expanded",
                this.menuIsOpen.toString(),
              ),
              this.menuIsOpen
                ? this.$menu.removeAttribute("hidden")
                : this.$menu.setAttribute("hidden", "")));
      }
      handleMenuButtonClick() {
        (this.menuIsOpen = !this.menuIsOpen), this.checkMode();
      }
    }
    h.moduleName = "govuk-service-navigation";
    class l extends c {
      constructor(t) {
        var e;
        super(t);
        const n = this.$root.hash,
          o = null != (e = this.$root.getAttribute("href")) ? e : "";
        let i;
        try {
          i = new window.URL(this.$root.href);
        } catch (t) {
          throw new s(`Skip link: Target link (\`href="${o}"\`) is invalid`);
        }
        if (
          i.origin !== window.location.origin ||
          i.pathname !== window.location.pathname
        )
          return;
        const r = (function (t) {
          if (t.includes("#")) return t.split("#").pop();
        })(n);
        if (!r)
          throw new s(
            `Skip link: Target link (\`href="${o}"\`) has no hash fragment`,
          );
        const u = document.getElementById(r);
        if (!u)
          throw new s({
            component: l,
            element: u,
            identifier: `Target content (\`id="${r}"\`)`,
          });
        this.$root.addEventListener("click", () =>
          (function (t, e = {}) {
            var n;
            const o = t.getAttribute("tabindex");
            function i() {
              var n;
              null == (n = e.onBlur) || n.call(t),
                o || t.removeAttribute("tabindex");
            }
            o || t.setAttribute("tabindex", "-1"),
              t.addEventListener(
                "focus",
                function () {
                  t.addEventListener("blur", i, { once: !0 });
                },
                { once: !0 },
              ),
              null == (n = e.onBeforeFocus) || n.call(t),
              t.focus();
          })(u, {
            onBeforeFocus() {
              u.classList.add("govuk-skip-link-focused-element");
            },
            onBlur() {
              u.classList.remove("govuk-skip-link-focused-element");
            },
          }),
        );
      }
    }
    (l.elementType = HTMLAnchorElement),
      (l.moduleName = "govuk-skip-link"),
      u(d),
      u(h),
      u(l);
  })();
})();
//# sourceMappingURL=hmlr.ea4b4f731040c7aaab1d.min.js.map
